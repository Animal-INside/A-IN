<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.team.ain.mapper.PostMapper">
    <!-- Result Maps -->
    <resultMap id="PostWithMedia" type="com.team.ain.dto.post.Post">
        <id property="id" column="id"/>
        <result property="memberId" column="member_id"/>
        <result property="memberName" column="member_name"/>
        <result property="content" column="content"/>
        <result property="createdAt" column="created_at"/>
        <result property="likeCount" column="like_count"/>
        <result property="profileUrl" column="profile_url"/>
        <result property="isLiked" column="is_liked"/>
        
        <!-- 미디어 리스트 매핑 -->
        <collection property="mediaList" javaType="java.util.ArrayList" ofType="com.team.ain.dto.post.PostMedia">
            <id property="id" column="media_id"/>
            <result property="mediaUrl" column="media_url"/>
            <result property="mediaType" column="media_type"/>
            <result property="displayOrder" column="display_order"/>
            <result property="createdAt" column="media_created_at"/>
        </collection>
        
        <!-- 댓글 리스트 매핑 -->
        <collection property="comments" javaType="java.util.ArrayList" ofType="com.team.ain.dto.post.Comment">
            <id property="id" column="comment_id"/>
            <result property="content" column="comment_content"/>
            <result property="memberName" column="comment_member_name"/>
            <result property="createdAt" column="comment_created_at"/>
        </collection>
    </resultMap>

    <!-- 게시물 생성 -->
    <insert id="insertPost" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO posts (member_id, content, created_at)
        VALUES (#{memberId}, #{content}, NOW())
    </insert>

    <!-- 게시물 미디어 추가 -->
    <insert id="insertPostMedia">
        INSERT INTO post_media (post_id, media_url, media_type, display_order, created_at)
        VALUES
        <foreach collection="list" item="media" separator=",">
            (#{media.postId}, #{media.mediaUrl}, #{media.mediaType}, #{media.displayOrder}, NOW())
        </foreach>
    </insert>

    <!-- 게시물 조회 (미디어 포함) -->
    <select id="getPostById" resultMap="PostWithMedia">
        WITH base_post AS (
            SELECT 
                p.*,
                m.name as member_name,
                m.profile_picture_url as profile_url,
                (SELECT COUNT(*) FROM post_likes pl WHERE pl.post_id = p.id) as like_count,
                CASE 
                    WHEN EXISTS (
                        SELECT 1 FROM post_likes pl 
                        WHERE pl.post_id = p.id AND pl.member_id = #{currentMemberId}
                    ) THEN true 
                    ELSE false 
                END as is_liked
            FROM posts p
            LEFT JOIN member m ON p.member_id = m.id
            WHERE p.id = #{id}
        )
        SELECT 
            p.*,
            pm.id as media_id,
            pm.media_url,
            pm.media_type,
            pm.display_order,
            pm.created_at as media_created_at,
            c.id as comment_id,
            c.content as comment_content,
            cm.name as comment_member_name,
            c.created_at as comment_created_at
        FROM base_post p
        LEFT JOIN post_media pm ON p.id = pm.post_id
        LEFT JOIN post_comments c ON p.id = c.post_id
        LEFT JOIN member cm ON c.member_id = cm.id
        ORDER BY pm.display_order, c.created_at DESC
    </select>

    <!-- 페이징된 게시물 목록 조회 (미디어 포함) -->
    <select id="getPostsByPage" resultMap="PostWithMedia">
        WITH base_posts AS (
            SELECT DISTINCT
                p.*,
                m.name as member_name,
                m.profile_picture_url as profile_url,
                (SELECT COUNT(*) FROM post_likes pl WHERE pl.post_id = p.id) as like_count,
                CASE 
                    WHEN EXISTS (
                        SELECT 1 FROM post_likes pl 
                        WHERE pl.post_id = p.id AND pl.member_id = #{currentMemberId}
                    ) THEN true 
                    ELSE false 
                END as is_liked
            FROM posts p
            LEFT JOIN member m ON p.member_id = m.id
            WHERE p.status = 'ACTIVE'
            ORDER BY p.created_at DESC
            LIMIT #{size} OFFSET #{page} * #{size}
        )
        SELECT 
            p.*,
            pm.id as media_id,
            pm.media_url,
            pm.media_type,
            pm.display_order,
            pm.created_at as media_created_at,
            c.id as comment_id,
            c.content as comment_content,
            cm.name as comment_member_name,
            c.created_at as comment_created_at
        FROM base_posts p
        LEFT JOIN post_media pm ON p.id = pm.post_id
        LEFT JOIN post_comments c ON p.id = c.post_id
        LEFT JOIN member cm ON c.member_id = cm.id
        ORDER BY p.created_at DESC, pm.display_order, c.created_at DESC
    </select>

    <!-- 게시물 수정 -->
    <update id="updatePost">
        UPDATE posts
        SET content = #{content},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 게시물 미디어 삭제 -->
    <delete id="deletePostMedia">
        DELETE FROM post_media WHERE post_id = #{id}
    </delete>

    <!-- 게시물 미디어 수정 (기존 미디어 삭제 후 새로운 미디어 추가) -->
    <delete id="deletePostMediaById">
        DELETE FROM post_media WHERE id = #{mediaId}
    </delete>

    <!-- 게시물 삭제 -->
    <delete id="deletePost">
        DELETE FROM posts WHERE id = #{id}
    </delete>

    <!-- 전체 게시물 수 조회 -->
    <select id="getTotalPostCount" resultType="int">
        SELECT COUNT(*) FROM posts
    </select>

    <!-- 게시물 좋아요 -->
    <insert id="insertPostLike">
        INSERT INTO post_likes (post_id, member_id, created_at)
        VALUES (#{postId}, #{memberId}, NOW())
    </insert>

    <delete id="deletePostLike">
        DELETE FROM post_likes WHERE post_id = #{postId} AND member_id = #{memberId}
    </delete>

    <select id="getPostLikes" resultType="com.team.ain.dto.post.PostLike">
        SELECT p.id as post_id,
                COUNT(pl.member_id) as like_count,
                BOOL_OR(CASE WHEN pl.member_id = #{memberId} THEN true ELSE false END) as is_liked
        FROM posts p
        LEFT JOIN post_likes pl ON p.id = pl.post_id
        WHERE p.id = #{postId}
        GROUP BY p.id
    </select>

    <select id="hasLike" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 
            FROM post_likes 
            WHERE post_id = #{postId} 
            AND member_id = #{memberId}
        )
    </select>


</mapper>